{"ast":null,"code":"const getOperations = async (URL, setOperations, amount) => {\n  try {\n    const operations = await fetch(`${URL}/operation?amount=${amount}`);\n    if (operations.ok) {\n      const response = await operations.json();\n      setOperations(response.operations);\n      console.log(response.operations);\n    } else {\n      // Error recieving the operations from the DB\n      alert('Failed to recive the operations');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    alert('Error in recieving the operations, Check the console for more info.');\n  }\n};\nexport default getOperations;","map":{"version":3,"names":["getOperations","URL","setOperations","amount","operations","fetch","ok","response","json","console","log","alert","error"],"sources":["/home/larks/GoldenRoute/Frontend/src/Components/DB/getOperations.js"],"sourcesContent":["\nconst getOperations = async (URL, setOperations, amount) => {\n    try{    \n        const operations = await fetch(`${URL}/operation?amount=${amount}`);\n        if (operations.ok) {\n            const response = await operations.json();\n            setOperations(response.operations);\n            console.log(response.operations);\n        } else {\n            // Error recieving the operations from the DB\n            alert('Failed to recive the operations');\n        }}\n    catch(error) {\n        console.error('Error:', error);\n        alert('Error in recieving the operations, Check the console for more info.');\n    }\n}\n\nexport default getOperations;"],"mappings":"AACA,MAAMA,aAAa,GAAG,MAAAA,CAAOC,GAAG,EAAEC,aAAa,EAAEC,MAAM,KAAK;EACxD,IAAG;IACC,MAAMC,UAAU,GAAG,MAAMC,KAAK,CAAE,GAAEJ,GAAI,qBAAoBE,MAAO,EAAC,CAAC;IACnE,IAAIC,UAAU,CAACE,EAAE,EAAE;MACf,MAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACI,IAAI,CAAC,CAAC;MACxCN,aAAa,CAACK,QAAQ,CAACH,UAAU,CAAC;MAClCK,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACH,UAAU,CAAC;IACpC,CAAC,MAAM;MACH;MACAO,KAAK,CAAC,iCAAiC,CAAC;IAC5C;EAAC,CAAC,CACN,OAAMC,KAAK,EAAE;IACTH,OAAO,CAACG,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9BD,KAAK,CAAC,qEAAqE,CAAC;EAChF;AACJ,CAAC;AAED,eAAeX,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}